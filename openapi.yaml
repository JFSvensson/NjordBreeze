openapi: 3.0.0
info:
  title: NjordBreeze API
  version: 0.1.0
  description: >-
    API for integrating personal weather station data with SMHI open data for
    comparison and analysis.
  contact:
    name: Fredrik Svensson
    email: fs222id@student.lnu.se
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://svenssonom.se/njordbreeze/api/v1
    description: Production server
paths:
  /auth/register:
    post:
      summary: Create a new user
      description: Creates a new user in the system.
      tags:
        - Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created successfully.
  /auth/login:
    post:
      summary: Log in to the API
      description: Logs in to the API and returns an access token.
      tags:
        - Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the user.
                passphrase:
                  type: string
                  description: The passphrase of the user.
      responses:
        '200':
          description: User logged in successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: The access token for the user.
        '401':
          description: Unauthorized.
  /auth/logout:
    post:
      summary: Log out of the API
      description: Logs out of the API and invalidates the access token.
      tags:
        - Authorization
      responses:
        '200':
          description: User logged out successfully.
        '401':
          description: Unauthorized.
  /auth/refresh:
    post:
      summary: Refresh access token
      description: Refreshes the access token for the user.
      tags:
        - Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Access token refreshed successfully.
        '401':
          description: Unauthorized.
  /:
    get:
      summary: Get API status
      description: >-
        Returns the status of the API and provides dynamical links to other
        endpoints.
      tags:
        - Status
      responses:
        '200':
          description: API is up and running.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: >-
                      Welcome to the NjordBreeze API. Use our endpoints to
                      interact with weather data.
                  documentation:
                    type: string
                    example: https://svenssonom.se/njordbreeze/docs
                  _links:
                    type: object
                    properties:
                      self:
                        type: string
                        description: The current endpoint.
                        example: /
                      auth:
                        type: string
                        description: The authentication endpoint.
                        example: /auth
                      weather:
                        type: string
                        description: The weather data endpoint.
                        example: /weather
                      stations:
                        type: string
                        description: The weather station data endpoint.
                        example: /stations
                      users:
                        type: string
                        description: The user data endpoint.
                        example: /users
                      webhooks:
                        type: string
                        example: /webhooks
  /smhi/stations:
    get:
      summary: Get information about all active SMHI weather stations
      description: >-
        Returns information about a currently active SMHI stations (those that
        has reported temperature data for the last hour).
      tags:
        - SMHI Weather Stations
      responses:
        '200':
          description: Successful response with SMHI weather station information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMHIWeatherStation'
        '404':
          description: SMHI weather station not found.
  /stations:
    get:
      summary: Get all weather stations
      description: Returns all weather stations in the system.
      tags:
        - Weather Stations
      responses:
        '200':
          description: A list of weather stations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WeatherStation'
    post:
      summary: Register a new weather station
      description: Registers a new weather station in the system.
      tags:
        - Weather Stations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherStationRegistration'
      responses:
        '201':
          description: Weather station registered successfully.
        '401':
          description: Unauthorized.
  /stations/{id}:
    get:
      summary: Get information about a specific weather station
      description: Returns information about a specific weather station in the system.
      tags:
        - Weather Stations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The weather station's ID.
      responses:
        '200':
          description: Successful response with weather station information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherStation'
        '404':
          description: Weather station not found.
    put:
      summary: Update information about a specific weather station
      description: Updates information about a specific weather station in the system.
      tags:
        - Weather Stations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The weather station's ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherStation'
      responses:
        '200':
          description: Weather station updated successfully.
        '401':
          description: Unauthorized.
    delete:
      summary: Delete a specific weather station
      description: Deletes a specific weather station from the system.
      tags:
        - Weather Stations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The weather station's ID.
      responses:
        '200':
          description: Weather station deleted successfully.
        '401':
          description: Unauthorized.
  /stations/nearest-station/{id}:
    get:
      summary: Get location for the station nearest to another specific weather station
      description: >-
        Returns the location, in latitued and longitude, for another registered
        weather station nearest the specific weather station in the system.
      tags:
        - Weather Stations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The weather station's ID.
      responses:
        '200':
          description: Successful response with weather station location.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherStation'
        '404':
          description: Weather station not found.
  /users/{id}:
    get:
      summary: Get information about a specific user
      description: Returns information about a specific user in the system.
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The user's ID.
      responses:
        '200':
          description: Successful response with user information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
    put:
      summary: Update information about a specific user
      description: Updates information about a specific user in the system.
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The user's ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '200':
          description: User updated successfully.
        '404':
          description: User not found.
    delete:
      summary: Delete a specific user
      description: Deletes a specific user from the system.
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The user's ID.
      responses:
        '200':
          description: User deleted successfully.
        '404':
          description: User not found.
  /weather/stations/{stationId}:
    get:
      summary: Get a all weather data from a specific station.
      description: Returns all weather data from a specific station.
      tags:
        - Weather Data
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The weather station's ID.
      responses:
        '200':
          description: A list of weather data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherData'
        '404':
          description: Weather data not found.
  /weather/{id}:
    get:
      summary: Get a specific set of weather data.
      description: Returns a specific set of weather data from a specific station.
      tags:
        - Weather Data
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The weather station's ID.
      responses:
        '200':
          description: A list of weather data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherData'
        '404':
          description: Weather data not found.
    post:
      summary: Add new weather data to a station
      description: >-
        Adds new weather data (temperature, windspeed and winddirection) to a
        specific weather station in the system. User needs to be authenticated
        and the owner of the station to add data.
      tags:
        - Weather Data
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The weather station's ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherData'
      responses:
        '201':
          description: Weather data added successfully.
        '401':
          description: Unauthorized.
    put:
      summary: Update weather data.
      description: >-
        Update weather data (temperature, windspeed and winddirection) for a
        specific dataset. User needs to be authenticated and the owner of the
        station to add data.
      tags:
        - Weather Data
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The weather data's ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherData'
      responses:
        '201':
          description: Weather data updated successfully.
        '401':
          description: Unauthorized.
    delete:
      summary: Delete weather data.
      description: >-
        Delete a specific dataset. User needs to be authenticated and the owner
        of the station to add data.
      tags:
        - Weather Data
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The weather data's ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherData'
      responses:
        '201':
          description: Weather data updated successfully.
        '401':
          description: Unauthorized.
  /weather/current/{id}:
    get:
      summary: Get current weather conditions.
      description: >-
        Returns current weather conditions, being the data most recently added,
        for a specified location.
      tags:
        - Weather Data
      parameters:
        - in: query
          name: stationid
          schema:
            type: string
          required: true
          description: >-
            The id for the weather station to fetch current weather conditions
            for.
      responses:
        '200':
          description: Successful response with current weather conditions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherData'
        '404':
          description: Location not found.
  /webhooks/register:
    post:
      summary: Register a webhook
      description: >-
        Adds a new webhook that check for changes in temperature, windspeed or
        winddirection at a specific weather station in the system.
      tags:
        - Webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        '201':
          description: Webhook registered successfully.
        '404':
          description: Weather station not found.
  /webhooks/remove/{id}:
    delete:
      summary: Remove a webhook
      description: Removes a webhook.
      tags:
        - Webhook
      parameters:
        - name: webhookId
          in: path
          required: true
          schema:
            type: string
          description: The webhook's ID.
      responses:
        '201':
          description: Webhook removed successfully.
        '404':
          description: Webhook not found.
components:
  schemas:
    NewUser:
      type: object
      properties:
        name:
          type: string
          description: The user's full name.
        email:
          type: string
          format: email
          description: The user's email address.
    RefreshToken:
      type: object
      properties:
        refreshToken:
          type: string
          description: The refresh token for the user.
    SMHIWeatherStation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the weather station.
        stationname:
          type: string
          description: The name of the weather station.
        key:
          type: string
          description: The key provided by SMHI.
        location:
          type: object
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              description: The type of the GeoJSON object, e.g., Point.
              enum:
                - Point
              default: Point
            coordinates:
              type: array
              description: A longitude and latitude coordinates of the station.
              minItems: 2
              maxItems: 2
              items:
                type: number
                format: double
        owner:
          type: string
          description: The owner of the weather station, SMHI.
    WeatherStation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the weather station.
        stationname:
          type: string
          description: The name of the weather station.
        description:
          type: string
          description: A description of the weather station.
        latitude:
          type: number
          description: The latitude of the weather station.
        longitude:
          type: number
          description: The longitude of the weather station.
        owner:
          type: string
          description: The owner of the weather station.
    WeatherStationRegistration:
      type: object
      properties:
        stationname:
          type: string
          description: The name of the weather station.
        description:
          type: string
          description: A description of the weather station.
        latitude:
          type: number
          description: The latitude of the weather station.
        longitude:
          type: number
          description: The longitude of the weather station.
    User:
      type: object
      properties:
        id:
          type: string
          description: The user's ID.
        name:
          type: string
          description: The user's full name.
        email:
          type: string
          format: email
          description: The user's email address.
    WeatherData:
      type: object
      properties:
        temperature:
          type: number
          format: float
          description: Temperature in Celsius.
        windSpeed:
          type: number
          format: float
          description: Wind speed in m/s.
        windDirection:
          type: number
          format: float
          description: >-
            Wind direction in degrees. 360 degrees is north, 90 degrees is east,
            180 degrees is south, and 270 degrees is west. 0 degrees is calm.
        stationid:
          type: string
          description: Unique identifier for the station.
    Webhook:
      type: object
      properties:
        url:
          type: string
          description: URL to notify.
        stationid:
          type: string
          description: Id for the weather station to be monitored for changes.
tags: []
